nextflow_process {

    name "Test Process SCALE_FACTORS"
    script "../main.nf"
    process "SCALE_FACTORS"

    test("writes scale factors correctly") {

        when {
            process {
                """
                input[0] = Channel.of([
                    [ id:'test', single_end: false ], // meta map
                    file(params.modules_testdata_base_path + 'genomics/sarscov2/illumina/bam/test.paired_end.sorted.bam', checkIfExists: true),
                    file(params.modules_testdata_base_path + 'genomics/sarscov2/illumina/bam/test.paired_end.sorted.bam.bai', checkIfExists: true)
                ])
                input[1] = file(params.pipelines_testdata_base_path + 'reference/gfp.fa', checkIfExists: true)
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(
                    process.out.scale_factors,
                    process.out.versions
                ).match() }
            )
        }
    }

    test("writes scale factors correctly - stub") {

    options "-stub"

        when {
            process {
                """
                input[0] = Channel.of([
                    [ id:'test', single_end: false ], // meta map
                    file(params.modules_testdata_base_path + 'genomics/sarscov2/illumina/bam/test.paired_end.sorted.bam', checkIfExists: true),
                    file(params.modules_testdata_base_path + 'genomics/sarscov2/illumina/bam/test.paired_end.sorted.bam.bai', checkIfExists: true)
                ])
                input[1] = file(params.pipelines_testdata_base_path + 'reference/gfp.fa', checkIfExists: true)
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out).match() }
            )
        }
    }
}
